// target:  'build'          - does not run integration tests
// target:  'integTest'      - runs integration tests (about 5 minutes worth)
// target:  'artifactoryPublish'  - push to local (archiva, as guest)
// target:  'jacocoTestReport'      - code coverage from unit tests
// target:  'jacocoIntegTestReport' - coverage from integration tests and UTs
//\\ target:  'sonarRunner'    - publish data to locally running SonarCube
// target:  'signArchives'   - test signature operation
//   OLD target:  'publish'        - push to local (archiva, as guest)
//   OLD target:  'uploadArchives' - push to maven central (sonatype, as user)

//

buildscript {
    repositories {
    }
}

// It is hilarious that the actual *Plugin does not have a version number
//    for most of these cases.
// e.g. checkstyle has a 'toolVersion', but that is not the version of the
//    actual CheckstylePlugin.
plugins {
    id "org.sonarqube" version "2.6.2"
    id "java"
    id "eclipse"
    id "maven-publish"
    id "jacoco"
    id "signing"
    id "checkstyle"
    id "com.jfrog.artifactory" version '5.2.5'   // version '6.0.0' '4.29.0' 
}

apply from: "$rootDir/gradle/versioning.gradle"


group = 'com.tiemens'
archivesBaseName = 'secretshare'
//version = '1.4.5-SNAPSHOT'
version = '1.4.5'
project.ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
sourceCompatibility = 1.21
targetCompatibility = 1.21

dependencies {
   testImplementation("org.junit.jupiter:junit-jupiter-engine:5.13.0")
   testRuntimeOnly 'org.junit.platform:junit-platform-engine:1.12.2'
   testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.12.2'
   // dependabot
   implementation("commons-beanutils:commons-beanutils:1.11.0")
}

repositories {
    if (project.hasProperty('archivaBaseUrl') ) {
//        maven { url project.archivaBaseUrl + "/libs-release-local" }
//        maven { url project.archivaBaseUrl + "/libs-snapshot-local" }
	  maven {
	    url project.archivaBaseUrl + "/libs-release"
	    allowInsecureProtocol = true
	    credentials {
	      username System.getenv("JFROG_USERNAME") ?: project.findProperty("jfrogUser")
	      password System.getenv("JFROG_PASSWORD") ?: project.findProperty("jfrogPass")
	    }
	  }
    } else {

    }
    mavenCentral()    
}

// if you need any compiler flags turned on:
//tasks.withType(JavaCompile) {
//    options.compilerArgs += ['-Xlint:deprecation']
//}


sourceSets {
    integTest {
        java {
	    compileClasspath += main.output + test.output
	    runtimeClasspath += main.output + test.output
	}
	resources {
	    srcDir "src/integTest/resources" // explicitly define
        }
    }
}

configurations {
    integTestImplementation.extendsFrom    testImplementation
    integTestRuntimeOnly.extendsFrom       testRuntimeOnly
}

// fix integTest:
allprojects {
    tasks.withType(Copy).all {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

eclipse {
    classpath {
        downloadSources = true
    }
}


test {
    useJUnitPlatform()
    exclude '**/*IntegTest.class'
//    reports.html.destination = file ("$reports.html.destination/test")
//    reports.junitXml.destination = file ("$reports.junitXml.destination/test")
}

// 2025/09/18: on xeon e5-2680v2 2.8Ghz this takes 6m40s (virtual machine)
task integTest(type: Test) {
    group = 'Verification'
    description = 'Run integration tests (i.e. longer-running tests)'
    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
    include '**/*IntegTest.class'
//    reports.html.destination = file ("$reports.html.destination/integTest")
//    reports.junitXml.destination = file ("$reports.junitXml.destination/integTest")
    
    // Your choice on when to run integTest:
    //  a) check.dependsOn integTest -
    //         causes 'build' -> check -> integTest     and runs in 5 minutes
    //    OR
    //  b) comment out // check.dependsOn integTest -
    //         causes 'build' -> check                  and runs in 12 seconds
    //comment out// check.dependsOn integTest

    useJUnitPlatform()
}

//jacoco {
//    toolVersion = "0.8.2"
//    reportsDir = file("$buildDir/reports/jacoco")
//}

//jacocoTestReport {
//    dependsOn 'test'
//    reports {
//        xml {
//            enabled true
//            destination file("$buildDir/reports/jacoco/jacocoTestReport.xml")
//        }
//        csv.enabled false
//        html {
//            enabled true
//            destination file("$buildDir/reports/jacoco/jacocoTestReport")
//        }
//    }
//}

//task jacocoIntegTestReport(type: JacocoReport) {
//    dependsOn integTest
//    sourceSets sourceSets.main
//    executionData integTest
//    reports {
//        xml {
//            enabled true
//            destination file("$buildDir/reports/jacoco/jacocoIntegTestReport.xml")
//        }
//        csv.enabled false
//        html {
//            enabled true
//            destination file("$buildDir/reports/jacoco/jacocoIntegTestReport")
//        }
//    }
//}

jar {
    manifest {
        attributes("Main-Class" : "com.tiemens.secretshare.main.cli.Main")
        // we have a module-info.java now, so we don't use the Automatic name:
        // attributes("Automatic-Module-Name" : "com.tiemens.secretshare")
    }
}

// Used in publishing:
//task sourcesJar(type: Jar, dependsOn: classes) {
//    classifier = 'sources'
//    from sourceSets.main.allSource
//}

// Used in publishing:
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

//artifacts {
//    archives jar

//    archives sourcesJar
//    archives javadocJar
//}

signing {
    required { 
        isReleaseVersion && 
        gradle.taskGraph.hasTask("uploadArchives")  &&
        project.hasProperty("ossrhUsername")
    }
    sign configurations.archives
}


// publishing {
//     publications {
//         mavenJava(MavenPublication) {
//             from components.java
//             artifact sourcesJar {
//                 classifier "sources"
//             }
//             artifact javadocJar {
//                 classifier "javadoc"
//             }
//             // A: reference: http://forums.gradle.org/gradle/topics/maven_publishing_plugin_doesnt_upload_generated_pom_file
//             // B: reference: http://books.sonatype.com/nexus-book/reference/bundles.html
//             // C: reference: http://blog.sonatype.com/2009/09/maven-tips-and-tricks-using-github/
//            // D: reference https://github.com/resteasy/Resteasy/blob/master/jaxrs/pom.xml
//             pom.withXml {
//                 def root = asNode()
//                 root.appendNode('description', 
//                     "Shamir's Secret Share in Java")
//                 root.appendNode('url', 
//                     'https://github.com/timtiemens/secretshare')
//                 // strange packaging is missing:
//                 root.appendNode('packaging', 'jar')
//                 root.appendNode('name', "SecretShare core")

//                 def scm = root.appendNode('scm')
//                 scm.appendNode('url', 
//                     //D:  'http://github.com/resteasy/Resteasy/tree/master/'
//                          'https://github.com/timtiemens/secretshare/tree/' + 
//                                    'v' + version + '/')
//                 scm.appendNode('connection', 
//                     //A: 'scm:https://bmuschko@github.com/bmuschko/gradle-cloudbees-plugin.git'
//                     //B: 'scm:git:git://github.com/sonatype/sample-project.git')
//                     //C: 'scm:git:git@github.com:tobrien/git-demo.git'
//                     //D: 'scm:git:git://github.com/resteasy/Resteasy.git'
//                          'scm:git:git://github.com/timtiemens/secretshare.git')
//                 scm.appendNode('developerConnection', 
//                     //A: 'scm:git://github.com/bmuschko/gradle-cloudbees-plugin.git'
//                     //B: 'scm:git:git://github.com/sonatype-sample-project.git')
//                     //C: 'scm:git:git@github.com:tobrien/git-demo.git'
//                     //D: 'scm:git:git@github.com:resteasy/Resteasy.git'
//                          'scm:git:git@github.com:timtiemens/secretshare.git')



//                 def license = root.appendNode('licenses').appendNode('license')
//                 license.appendNode('name', 
//                     'GNU Lesser General Public License (LGPL), Version 2.1')
//                 license.appendNode('url', 
//                     'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html')
//                 license.appendNode('distribution', 'repo')

//                 def developer = root.appendNode('developers').appendNode('developer')
//                 developer.appendNode('id', 'timtiemens')
//                 developer.appendNode('name', 'Tim Tiemens')
//                 // developer.appendNode('email', 'tim@gmail.com')
//                 developer.appendNode('url', 'https://github.com/timtiemens')
//             }
//         }
//     }

//     repositories {
//         maven {
//             if (project.hasProperty('publishBaseUrl')) {
//                 if (! project.ext.isReleaseVersion) {
//                     url project.publishBaseUrl + "/snapshots"
//                 } else {
//                     url project.publishBaseUrl + "/internal"
//                 }
//             } else {
//                     // this is a notice that 'publish' requires .publishBaseUrl
//                     url "http://you.must.configure.project.publishBaseUrl"
//             }
//         }
//     }
// }


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = project.name
            version = project.version

            pom {
                name.set("SecretShare Library")
                description.set("Shamir's Secret Share in Java")
                url.set("https://github.com/timtiemens/secretshare")
                licenses {
                    license {
                        name.set("GNU Lesser General Public License (LGPL), Version 2.1")
                        url.set("https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html")
                    }
                }
                developers {
                    developer {
                        id.set("timtiemens")
                        name.set("Tim Tiemens")
                        email.set("timremote@gmail.com")
			url.set("https://github.com/timtiemens")
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/timtiemens/secretshare.git")
                    developerConnection.set("scm:git:git@github.com:timtiemens/secretshare.git")
                    url.set('https://github.com/timtiemens/secretshare/tree/' +
                             'v' + version + '/')
                }
            }
        }
    }
}

// --- Artifactory configuration ---
artifactory {
//  contextUrl = "http://10.0.1.71:8081/artifactory" 
    publish {
        contextUrl = project.archivaBaseUrl
        repository {
	    String libstr = project.ext.isReleaseVersion ?
	                      "libs-release-local" :
			      "libs-snapshot-local"
            setRepoKey(libstr) 
            setUsername(System.getenv("JFROG_USERNAME") ?: project.findProperty("jfrogUser"))
            setPassword(System.getenv("JFROG_PASSWORD") ?: project.findProperty("jfrogPass"))
        }
        defaults {
            publications('mavenJava')
            publishArtifacts = true
            publishPom = true
        }
    }

  // // Found: "The resolverconfiguration is now implicitly linked to the std
  // //         repositories block.
  // //         Older versions used a resolver closure, but this is deprecated."
}

ext.useOssrhUsername = 
   project.hasProperty("ossrhUsername") ? ossrhUsername : "fake"
ext.useOssrhPassword = 
   project.hasProperty("ossrhPassword") ? ossrhPassword : "fake"



sonarqube {
    properties {
        property 'sonar.projectName', 'secretshare'
        property 'sonar.projectDescription', "Shamir's Secret Share in Java"
        property 'sonar.sourceEncoding', 'UTF-8'
        properties['sonar.tests'] += sourceSets.integTest.allSource.srcDirs
        property 'sonar.host.url', 'TODO'
        property 'sonar.login', 'TODO'
    }
}

checkstyle {
    toolVersion "10.5.0"
//    toolVersion "7.6.1"
//    toolVersion "8.17"

    def dir = "$projectDir/config/checkstyle"


    configProperties = [
        "checkstyle.header.file" : "${dir}/java.header",
        "checkstyle.suppressions.file" : "${dir}/suppressions.xml"
    ]
}
 checkstyleMain {
     includes = ['src/main/java/**/*.java']
     excludes = ['src/test/java/**/*.java'] // Exclude files 
 }
 checkstyleTest {
     includes = ['src/main/java/**/*.java']
     excludes = ['src/test/java/**/*.java'] // Exclude files 
 }
 checkstyleIntegTest {
     includes = ['src/main/java/**/*.java']
     excludes = ['src/test/java/**/*.java'] // Exclude files 
 }

task showPluginInfo {
    doLast {
        project.plugins.each {
            println("Plugin " + it.class)
        }
        println "org.gradle.api.plugins.quality.CheckstylePlugin=" + org.gradle.api.plugins.quality.CheckstylePlugin.DEFAULT_CHECKSTYLE_VERSION
    }
}


//task wrapper(type: Wrapper) {
//    gradleVersion = '4.8'
//}
// gradle 5+ now uses    $ gradle wrapper --gradle-version 8.11.1

